#!/usr/bin/env node

/*
 * Zest command line utility
 *
 * zest start [configPath]
 * zest start-nodemon [configPath]
 *
 * zest create [dir]
 *
 */
var fs = require('fs'),
  path = require('path'),
  spawn = require('child_process').spawn;

var windows = process.platform == 'win32';

var args = process.argv.splice(2);

if (args.length == 0)
  args.push('start');

switch (args[0]) {
  case 'start':
    zestStart(args[1], false);
    break;
  case 'start-nodemon':
    zestStart(args[1], true);
    break;
  case 'create':
    zestCreate(args[1], args);
    break;
  case 'add':
    zestVoloAdd(args.splice(1, args.length - 1));
    break;
  default:
    console.log('Unrecognised command "' + args[0] + '".');
    break;
}

function zestVoloAdd(args) {
  pipeStd(spawn(getBinPath('volo'), ['add'].concat(args), { cwd: process.cwd() }));
}

function zestCreate(createPath, args) {
  var createDir = path.resolve(createPath, '../');
  var createName = path.basename(path.resolve(createPath));
 
  //calls 'volo create [createName] zestjs/zest-template'
  var repo = 'basic'
  if (args[2])
    repo = args[2];
  //if not a full name, default to the zestjs/[name]-template rule
  if (repo.indexOf('/') == -1)
    repo = 'zestjs/template-' + repo;
  
  pipeStd(spawn(getBinPath('volo'), ['create', createName, repo], { cwd: createDir }));
}

function zestStart(configPath, nodemon) {
  var isDir = !configPath || configPath && configPath.substr(configPath.length - 1, 1) == (windows ? '\\' : '/');
  configPath = configPath ? path.resolve(configPath) : process.cwd();
  if (isDir && configPath.substr(configPath.length - 1, 1) != (windows ? '\\' : '/'))
    configPath += (windows ? '\\' : '/');
  var configDir = isDir ? configPath : path.dirname(configPath);
  
  //for nodemon, rerun the current script through nodemon to get monitoring
  if (nodemon) {
    if (windows)
      console.log('Nodemon support for windows isnt working, contributions welcome.');
    return pipeStd(spawn(getBinPath('nodemon'), [module.filename, 'start', configPath], { cwd: configDir }));
  }
  
  var localBinPath = path.resolve(configDir, 'node_modules/.bin/zest') + (windows ? '.cmd' : '');
  if (fs.existsSync(localBinPath) && __dirname != path.dirname(fs.realpathSync(localBinPath))) {
    //run the local version of zest through the local bin
    console.log('Running zest server as a local module');
    pipeStd(spawn(localBinPath, ['start', configPath], { cwd: configDir }));
  }
  else {
    //run the version of zest in the current directory (this version of zest server)
    var zest = require('./zest-server');
    zest.createServer(configPath);
  }
}

/* helper functions */
function pipeStd(p) {
  p.stdout.on('data', function(data) {
    process.stdout.write(data);
  });
  p.stderr.on('data', function(data) {
    process.stderr.write(data);
  });
}

function getBinPath(binName) {
  var localBinPath = path.resolve(path.dirname(module.filename), 'node_modules/.bin/' + binName + (windows ? '.cmd' : ''));
  if (fs.existsSync(localBinPath))
    return localBinPath;
  else
    return binName;
}
