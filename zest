#!/usr/bin/env node

/*
 * Zest command line utility
 *
 * zest start [configPath]
 * zest start-nodemon [configPath]
 *
 * zest create [dir]
 *
 */
var fs = require('fs'),
  path = require('path'),
  spawn = require('child_process').spawn;

var windows = process.platform == 'win32';

var args = process.argv.splice(2);

if (args.length == 0)
  args.push('start');

switch (args[0]) {
  case 'start':
    zestStart(args[1], false);
    break;
  case 'start-nodemon':
    zestStart(args[1], true);
    break;
  case 'create':
    zestCreate(args[1], args);
    break;
  case 'add':
    zestVoloAdd(args.splice(1, args.length - 1));
    break;
  default:
    console.log('Unrecognised command "' + args[0] + '".');
    break;
}

function zestVoloAdd(args) {
  pipeStd(spawn(getBinPath('volo'), ['add'].concat(args), { cwd: process.cwd() }));
}

function zestCreate(createPath, args) {
  var createDir = path.resolve(createPath, '../');
  var createName = path.basename(path.resolve(createPath));
 
  //calls 'volo create [createName] zestjs/zest-template'
  var repo = 'basic'
  if (args[2])
    repo = args[2];
  //if not a full name, default to the zestjs/[name]-template rule
  if (repo.indexOf('/') == -1)
    repo = 'zestjs/template-' + repo;
  
  pipeStd(spawn(getBinPath('volo'), ['create', createName, repo], { cwd: createDir }));
}

function zestStart(environment, nodemon) {
  
  var localBinPath = path.resolve(process.cwd() + (windows ? '\\' : '/'), 'node_modules/.bin/zest') + (windows ? '.cmd' : '');
  if (fs.existsSync(localBinPath)) {
    if (path.resolve(__dirname, '../') == path.resolve(localBinPath, '../../')) {
      require('../zest-server').createServer(null, environment);
      return;
    }
    
    //run the local version of zest through the local bin
    console.log('Running zest server as a local module');
    //for nodemon, rerun the current script through nodemon to get monitoring
    if (nodemon) {
      if (windows)
        console.log('Nodemon support for windows isnt working, contributions welcome.');
      pipeStd(spawn(getBinPath('nodemon'), [localBinPath, 'start', environment || ''], { cwd: process.cwd() }));
    }
    else
      pipeStd(spawn(localBinPath, ['start', environment || ''], { cwd: process.cwd() }));
  }
  else {
    //run the version of zest in the current directory (this global version of zest server)
    if (!fs.existsSync(localBinPath))
      console.log('Zest server not locally installed, using global install. Note that local NodeJS requires will not work.')
    require('zest-server').createServer(null, environment);
  }
}

/* helper functions */
function pipeStd(p) {
  p.stdout.on('data', function(data) {
    process.stdout.write(data);
  });
  p.stderr.on('data', function(data) {
    process.stderr.write(data);
  });
}

function getBinPath(binName) {
  var localBinPath = path.resolve(path.dirname(module.filename), 'node_modules/.bin/' + binName + (windows ? '.cmd' : ''));
  if (fs.existsSync(localBinPath))
    return localBinPath;
  else
    return binName;
}
